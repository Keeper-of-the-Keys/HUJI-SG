#!/usr/bin/env python
#################################################### 
##  ___   ____       ____   ___  ## cs.huji.ac.il ##
## |   | /   /       \   \ |   | ##    /\         ##
## |   |/   /         \   \|   | ##   / /         ##
## |       /       __  \       | ##   \_/         ##
## |      /   ___ |  |_ \      | ##    _          ##
## |      \  / _ \|   _|/      | ##   | |  __  _  ##
## |       \/ / \ \  | /       | ##   | | /  \//  ##
## |   |\   \ \_/ /  |/   /|   | ##   | |/ /\ \   ##
## |___| \___\___/\__/___/ |___| ##   \_  /  \_\  ##
##      KeeperoftheKeys.nl       ##    /_/        ## 
####################################################

################################################################################
# Written by E.S. Rosenberg 5774/2013
#
# Description:
# This script will try to send an SMS using one or more sms-sending hosts.
# In the event of a failure it will send a message to the CSE queue.
#
# Arguments:
# 1 cellnumber
# 2 message enclosed in quotes
#
# Example call:
# /path/to/script 0501111111 "very important message"
#
# Return values:
# 0 - success!
# 2 - failure to send SMS.
#
# @author: E.S. Rosenberg (Keeper of the Keys) <esr at mail dot hebrew dot edu>
# @license: GPLv2
################################################################################

try:
    import socket
    import sys
    import argparse
    import re
    import huji_cs_nagios_config
except Exception as e:
    print 'Failed imports: ' + str(e)
    exit(2)

# If ports ever get set per host just change the smsserver list to a list of
# tuples.
SMSPORT = 5000

# Setup different available SMS sending hosts.
smsservers = []
smsservers.append('smsserver')
smsservers.append('facundo')

def sendSMS(message, cell, host, port):
    # The listener expects the following format: [cell#][:space:][message]
    # ie.: 0501111111 my message
    #
    # Message can contain \n for newlines.
    try:
        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        s.sendto(cell + ' ' + message, (host, SMSPORT))
        answer = s.recv(32)
        s.close()
        # Currently the listener returns the number it sent the SMS followed 
        # by a message serial number in case of success, ie. 0501111111: 123
        if answer.startswith(cell) and re.search('(\d+)$', answer):
            return True

    except Exception as e:
        return False

if __name__ == "__main__":
    parser = argparse.ArgumentParser(__file__)
    parser.add_argument('cell', help='Cellnumber', nargs = 1)
    parser.add_argument('message', help='"Message in quotes"', nargs = 1)

    args = parser.parse_args()
    
    for server in smsservers:
        if sendSMS(args.message[0], args.cell[0], server, SMSPORT):
            exit(0) # If the message was sent succesfully we're done.

    # If this code is reached the world is coming to an end....
    try:
        import smtplib
        from email.mime.text import MIMEText
        email = MIMEText('Failed to send SMS with all sms servers, sending ' +
                         'e-mail instead on the off chance someone survived '+
                         'the zombie apocalypse and will read my important ' +
                         'message:\n\n'+
                         'Desired recipient: ' + args.cell[0] + '\n' +
                         'Message content: ' + args.message[0])
        email['Subject'] = 'Disaster has struck! Can\'t send SMS!'
        email['From'] = 'nagios@cs.huji.ac.il'
        email['To'] = 'system@cs.huji.ac.il'
        s = smtplib.SMTP('mailhost.cs.huji.ac.il')
        s.sendmail(email['From'], email['To'], email.as_string())
        s.quit()
    except:
        # The disaster is clearly total, give up and start digging your grave.
        exit(2)
    
    # Exit with nagios critical state code, I am not sure if nagios will check 
    # this, but if it does it should know there was a problem sending SMS.
    exit(2)
